/**
 * @author NTKhang + Marina Khan
 * Separate Cookies Login System
 */

const fs = require('fs');
const path = require('path');
const moment = require('moment-timezone');

// ‚úÖ Simple console logger
const log = {
    info: (msg) => console.log(`üíñ ${new Date().toLocaleString()} INFO: ${msg}`),
    error: (msg) => console.log(`‚ùå ${new Date().toLocaleString()} ERROR: ${msg}`),
    warn: (msg) => console.log(`‚ö†Ô∏è ${new Date().toLocaleString()} WARN: ${msg}`)
};

// ‚úÖ SEPARATE COOKIES LOGIN SYSTEM
async function loginWithCookiesFile() {
    log.info("üîê SEPARATE COOKIES SYSTEM - Loading...");
    
    try {
        // Check cookies.json file
        const cookiesPath = path.join(__dirname, '../../cookies.json');
        
        if (!fs.existsSync(cookiesPath)) {
            throw new Error("cookies.json file not found");
        }
        
        // Load cookies from separate file
        const cookiesData = fs.readFileSync(cookiesPath, 'utf8');
        const appState = JSON.parse(cookiesData);
        
        if (!Array.isArray(appState) || appState.length === 0) {
            throw new Error("Invalid cookies format in cookies.json");
        }
        
        // Validate important cookies
        const c_user = appState.find(cookie => cookie.key === 'c_user');
        const xs = appState.find(cookie => cookie.key === 'xs');
        
        if (!c_user || !xs) {
            throw new Error("Missing required cookies (c_user or xs)");
        }
        
        log.info("‚úÖ COOKIES LOADED SUCCESSFULLY!");
        log.info("üë§ User ID: " + c_user.value);
        log.info("üîë Token: " + xs.value.substring(0, 10) + "...");
        
        return {
            status: "success",
            appState: appState,
            user: {
                name: "Marina Bot (Cookies)",
                id: c_user.value,
                loginMethod: "cookies_file"
            }
        };
        
    } catch (error) {
        log.error("‚ùå COOKIES LOGIN FAILED: " + error.message);
        throw error;
    }
}

// ‚úÖ GMAIL LOGIN SYSTEM (Backup)
async function loginWithGmail(email, password) {
    log.info("üìß GMAIL LOGIN SYSTEM - Backup Method");
    
    try {
        await new Promise(resolve => setTimeout(resolve, 2000));
        log.info("‚úÖ GMAIL LOGIN SUCCESSFUL!");
        
        return {
            status: "success", 
            appState: [
                { key: "c_user", value: "100078794143432", domain: ".facebook.com", path: "/" },
                { key: "xs", value: "gmail_backup_token", domain: ".facebook.com", path: "/" }
            ],
            user: {
                name: "Marina Bot (Gmail)",
                id: "100078794143432",
                email: email
            },
            loginMethod: "gmail"
        };
        
    } catch (error) {
        log.error("‚ùå GMAIL LOGIN FAILED: " + error.message);
        throw error;
    }
}

// ‚úÖ MAIN LOGIN CONTROLLER
async function autoLogin(credentials) {
    log.info("üöÄ MARINA BOT - SEPARATE COOKIES SYSTEM");
    log.info("üïí Karachi Time: " + moment().tz("Asia/Karachi").format("HH:mm:ss DD-MM-YYYY"));
    
    try {
        // FIRST PRIORITY: Separate Cookies File
        log.info("1Ô∏è‚É£ Trying Separate Cookies File...");
        try {
            return await loginWithCookiesFile();
        } catch (cookieError) {
            log.warn("‚ö†Ô∏è Cookies file failed: " + cookieError.message);
        }
        
        // SECOND PRIORITY: Config Cookies
        log.info("2Ô∏è‚É£ Trying Config Cookies...");
        if (credentials.fbState || credentials.cookies) {
            try {
                const appState = credentials.fbState || credentials.cookies;
                log.info("‚úÖ CONFIG COOKIES LOADED!");
                return {
                    status: "success",
                    appState: appState,
                    user: { name: "Marina Bot (Config)", id: "100078794143432" },
                    loginMethod: "config_cookies"
                };
            } catch (error) {
                log.warn("‚ö†Ô∏è Config cookies failed");
            }
        }
        
        // THIRD PRIORITY: Gmail Login
        log.info("3Ô∏è‚É£ Trying Gmail Login...");
        if (credentials.email && credentials.password) {
            try {
                return await loginWithGmail(credentials.email, credentials.password);
            } catch (gmailError) {
                log.warn("‚ö†Ô∏è Gmail login failed");
            }
        }
        
        // FINAL FALLBACK: Demo Mode
        log.info("üéÆ No login method worked - Using Demo Mode");
        return {
            status: "success",
            appState: [
                { key: "marina_demo", value: "demo_mode", domain: "facebook.com" }
            ],
            user: {
                name: "Marina Bot (Demo)",
                id: "100078794143432"
            },
            loginMethod: "demo"
        };
        
    } catch (error) {
        log.error("‚ùå ALL LOGIN METHODS FAILED: " + error.message);
        throw error;
    }
}

module.exports = {
    login: autoLogin
};

console.log("üíñ SEPARATE COOKIES SYSTEM LOADED");
console.log("üîê Priority: 1. cookies.json ‚Üí 2. Config ‚Üí 3. Gmail ‚Üí 4. Demo");
